// IMPORTANT: Start your code on the 2nd line - This comment is required by Firefox
try {
  let { classes: Cc, interfaces: Ci, utils: Cu } = Components;
  const Services = globalThis.Services || Cu.import("resource://gre/modules/Services.jsm").Services;

  // --- Core Settings to Disable Private Browsing ---
  try {
    // Prefs seem okay, just log status
    const enabledPref = "browser.privatebrowsing.enabled";
    const autostartPref = "browser.privatebrowsing.autostart";
    if (Services.prefs.getBoolPref(enabledPref, true)) {
        Services.prefs.setBoolPref(enabledPref, false);
        Cu.reportError(`AUTOCONFIG: Set ${enabledPref} to false.`);
    } else {
        Cu.reportError(`AUTOCONFIG: ${enabledPref} was already false.`);
    }
    if (!Services.prefs.prefIsLocked(autostartPref) || Services.prefs.getBoolPref(autostartPref, true)) {
        Services.prefs.lockPref(autostartPref, false);
        Cu.reportError(`AUTOCONFIG: Locked ${autostartPref} to false.`);
    } else {
         Cu.reportError(`AUTOCONFIG: ${autostartPref} was already locked false.`);
    }
  } catch (prefError) {
     Cu.reportError("AUTOCONFIG: Error checking/setting private browsing preferences: " + prefError);
  }

  // --- Observer to Modify UI on Window Load ---
  function PrivateBrowsingUIHider() {
    Services.obs.addObserver(this, 'chrome-document-global-created', false);
    Cu.reportError("AUTOCONFIG: PrivateBrowsingUIHider Observer Added.");
  }

  PrivateBrowsingUIHider.prototype = {
    observe: function(subject, topic, data) {
       Cu.reportError(`AUTOCONFIG: Observer fired for topic: ${topic}`);
       subject.addEventListener('DOMContentLoaded', this, { once: true });
    },

    handleEvent: function(event) {
      const document = event.originalTarget;
      const window = document.defaultView;
      const docURI = document ? document.documentURI : 'undefined document';

      Cu.reportError(`AUTOCONFIG: handleEvent triggered for document: ${docURI}`);

      if (document && docURI === "chrome://browser/content/browser.xhtml") {
        Cu.reportError("AUTOCONFIG: Correct documentURI found (browser.xhtml).");

        if (!window) {
            Cu.reportError("AUTOCONFIG: ERROR - Could not get window (defaultView) from browser.xhtml document.");
            return;
        }
        Cu.reportError("AUTOCONFIG: Associated window found. Scheduling UI modifications using window.setTimeout.");

        window.setTimeout(() => {
          Cu.reportError("AUTOCONFIG: setTimeout callback running for browser.xhtml. Attempting UI modifications...");
          try {
             // --- Disable the Command (Correct ID based on browser-sets.inc) ---
            let pbCommand = document.getElementById("Tools:PrivateBrowsing"); // *** CORRECTED ID ***
            if (pbCommand) {
              pbCommand.setAttribute("disabled", "true");
              Cu.reportError("AUTOCONFIG: Disabled private browsing command (Tools:PrivateBrowsing).");
            } else {
               Cu.reportError("AUTOCONFIG: DEBUG - Private browsing command (Tools:PrivateBrowsing) NOT found.");
            }

            // --- Hide Keyboard Shortcut Element (Good practice) ---
            let pbKey = document.getElementById("key_privatebrowsing");
            if (pbKey) {
              pbKey.setAttribute("hidden", "true");
              Cu.reportError("AUTOCONFIG: Hid private browsing key element (key_privatebrowsing).");
            } else {
              Cu.reportError("AUTOCONFIG: DEBUG - Private browsing key element (key_privatebrowsing) NOT found.");
            }

            // --- Hide Menu Items ---
            let fileMenuPB = document.getElementById("menu_newPrivateWindow");
            if (fileMenuPB) {
              fileMenuPB.hidden = true;
              Cu.reportError("AUTOCONFIG: Hid File menu private window item (menu_newPrivateWindow).");
            } else {
               Cu.reportError("AUTOCONFIG: DEBUG - File menu item (menu_newPrivateWindow) NOT found.");
            }

             // --- Try alternate ID for App Menu button ---
             let appMenuPB = document.getElementById("appMenu-private-window-button"); // Keep trying this ID
            if (appMenuPB) {
              appMenuPB.hidden = true;
              Cu.reportError("AUTOCONFIG: Hid App menu private window button (appMenu-private-window-button).");
            } else {
               Cu.reportError("AUTOCONFIG: DEBUG - App menu button (appMenu-private-window-button or appMenu-new-private-window-button) NOT found.");
            }

            let contextLinkPB = document.getElementById("context-openlinkprivate");
            if (contextLinkPB) {
              contextLinkPB.hidden = true;
              Cu.reportError("AUTOCONFIG: Hid context menu 'Open Link in Private Window' (context-openlinkprivate).");
            } else {
               Cu.reportError("AUTOCONFIG: DEBUG - Context menu item (context-openlinkprivate) not found initially.");
            }
            Cu.reportError("AUTOCONFIG: UI modifications attempted for browser.xhtml.");

          } catch (e) {
            Cu.reportError(`AUTOCONFIG: Error during UI modifications inside setTimeout for browser.xhtml: ${e}\n${e.stack}`);
          }
        }, 1000); // 1 second delay
      } else {
         Cu.reportError(`AUTOCONFIG: Skipping UI modifications for document: ${docURI}`);
      }
    }
  };

  if (!Services.appinfo.inSafeMode) {
    new PrivateBrowsingUIHider();
    Cu.reportError("AUTOCONFIG: Private Browsing UI Hider Initialized (Instance Created).");
  }

} catch (e) {
  try {
       if (typeof Cu !== 'undefined' && Cu.reportError) {
         Cu.reportError(`AUTOCONFIG: FATAL Error in firefox.cfg: ${e}\n${e.stack}`);
       } else {
         dump(`AUTOCONFIG: FATAL Error in firefox.cfg: ${e}\n`);
       }
  } catch (err) {
       dump(`AUTOCONFIG: FATAL Error reporting error in firefox.cfg: ${err}\n`);
  }
}
